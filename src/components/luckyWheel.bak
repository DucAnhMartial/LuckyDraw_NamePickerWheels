import React, { useRef, useState, useEffect, useMemo } from 'react'
import { motion, useAnimation } from 'framer-motion'

// Các hằng số cho slot
const ITEM_HEIGHT = 60
const VISIBLE_ITEMS = 5
const CENTER_SLOT = Math.floor(VISIBLE_ITEMS / 2)
const ROUNDS = 30 // số vòng "full" để quay
const REPEAT = ROUNDS + 1 // lặp thêm 1 để chứa targetIdx
const DURATION = 20 // thời gian quay (s)

export default function SlotMachine({ participants = [], isDrawing = false, onWinner }) {
  const controls = useAnimation()
  const [winnerListIdx, setWinnerListIdx] = useState(null)
  const prevIsDrawing = useRef(false) // track trạng thái isDrawing trước đó

  // Tạo extendedList đủ dài: REPEAT vòng
  const extendedList = useMemo(
    () => Array.from({ length: REPEAT }, () => participants).flat(),
    [participants]
  )

  // approximate cubic-bezier cho hiệu ứng expo
  const easeExpo = [0.19, 1, 0.22, 1]

  useEffect(() => {
    // Chỉ chạy animation khi isDrawing chuyển từ false -> true
    if (!isDrawing || prevIsDrawing.current) {
      prevIsDrawing.current = isDrawing
      return
    }

    prevIsDrawing.current = isDrawing
    setWinnerListIdx(null)

    // Chọn ngẫu nhiên winner trong danh sách gốc
    const winnerIdx = Math.floor(Math.random() * participants.length)
    // Tính vị trí thực tế trong extendedList
    const targetIdx = ROUNDS * participants.length + winnerIdx
    // Tọa độ Y để slot vào giữa khung
    const targetY = -(targetIdx * ITEM_HEIGHT - CENTER_SLOT * ITEM_HEIGHT)

    // Reset vị trí về đầu
    controls.set({ y: 0 })
    // Bắt đầu animation
    controls
      .start({
        y: targetY,
        transition: { duration: DURATION, ease: easeExpo }
      })
      .then(() => {
        // Khi kết thúc animation, highlight và trả kết quả
        setWinnerListIdx(targetIdx)
        onWinner?.(extendedList[targetIdx])
      })
  }, [isDrawing, participants, controls, onWinner, extendedList])

  return (
    <div className="relative w-full h-full flex items-center justify-center overflow-hidden">
      {/* Khung highlight giữa */}
      <div className="absolute top-1/2 left-0 w-full h-[60px] -translate-y-1/2 border-y-2 border-yellow-300 bg-yellow-500/10 z-20 pointer-events-none" />

      {/* Container overflow */}
      <div
        className="relative w-full overflow-hidden"
        style={{ height: ITEM_HEIGHT * VISIBLE_ITEMS }}
      >
        <motion.div animate={controls} style={{ willChange: 'transform' }}>
          {extendedList.map((p, i) => {
            const isWinner = i === winnerListIdx
            return (
              <div
                key={i}
                className={`flex items-center justify-center h-[60px] text-2xl font-bold border-b-[0.1px] transition-all ${
                  isWinner
                    ? 'text-yellow-400 bg-yellow-700/20 shadow-inner scale-105'
                    : 'text-white/80'
                }`}
              >
                {p.display_name ?? p.name ?? p}
              </div>
            )
          })}
        </motion.div>
      </div>
    </div>
  )
}
